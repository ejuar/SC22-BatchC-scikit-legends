{"backend_state":"init","connection_file":"/projects/66ddc8e4-4410-423b-929c-a2b80762c7ad/.local/share/jupyter/runtime/kernel-b1d4dbea-87be-4cb5-9231-95c827c550ce.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"}},"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"b6c404","input":"","pos":69,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"dc9820","input":"tuition.info()","metadata":{"vscode":{"languageId":"plaintext"}},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","id":"005aad","input":"def state_stats_df(merged_df):\n    # get a list of all state_name's\n    states = merged_df.state_name.unique()\n\n    # Create a column in a new dataframe for each stat I want\n    state_stats = pd.DataFrame(index=states, columns=['number of schools','average early_career_pay',\n                                                      'average mid_career_pay','average make_world_better_percent',\n                                                      'average stem_percent','average in_state_tuition','average out_of_state_tuition'])\n    # Fill in the columns for each state\n    for state in states:\n        state_stats.loc[state, 'number of schools'] = len(merged_df[merged_df.state_name == state])\n        state_stats.loc[state, 'average early_career_pay'] = merged_df[merged_df.state_name == state]['early_career_pay'].mean()\n        state_stats.loc[state, 'average mid_career_pay'] = merged_df[merged_df.state_name == state]['mid_career_pay'].mean()\n        state_stats.loc[state, 'average make_world_better_percent'] = merged_df[merged_df.state_name == state]['make_world_better_percent'].mean()\n        state_stats.loc[state, 'average stem_percent'] = merged_df[merged_df.state_name == state]['stem_percent'].mean()\n        state_stats.loc[state, 'average in_state_tuition'] = merged_df[merged_df.state_name == state]['in_state_tuition'].mean()\n        state_stats.loc[state, 'average out_of_state_tuition'] = merged_df[merged_df.state_name == state]['out_of_state_tuition'].mean()\n    # sort alphabetically by state\n    state_stats.sort_index(inplace = True)\n    return state_stats\n\nstate_stats = state_stats_df(merged_df)\nstate_stats.head()","pos":49,"state":"done","type":"cell"}
{"cell_type":"code","id":"026c9a","input":"merged_df.head()","pos":35,"state":"done","type":"cell"}
{"cell_type":"code","id":"045dc7","input":"def fill_state(row):\n    if row['state_code'] == 'AS':\n        return 'American Samoa'\n    elif row['state_code'] == 'DC':\n        return 'District of Columbia'\n    elif row['state_code'] == 'PR':\n        return 'Puerto Rico'\n    elif row['state_code'] == 'GU':\n        return 'Guam'\n    elif row['state_code'] == 'VI':\n        return 'Virgin Islands'\n    else:\n        return row['state']\n\n# axis = 1 means do it to the columns (0 is the rows)\ntuition['state'] = tuition.apply(lambda row : fill_state(row), axis=1) ","pos":27,"state":"done","type":"cell"}
{"cell_type":"code","id":"04a500","input":"tuition[tuition['state'].isnull()]","pos":29,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","id":"06011f","input":"fig = px.scatter(state_stats_extras, x='four year average in state tuition', y='average mid_career_pay',\n                 color='state',size='average make_world_better_percent',\n                 trendline=\"ols\", trendline_scope = 'overall',\n                 title= 'Average In State Tuition vs Average % of Students Graduating with STEM Degrees')\n\nfig.show()","pos":64,"state":"done","type":"cell"}
{"cell_type":"code","id":"0a8c1d","input":"print(tuition.columns)\nprint(\"\")\nprint(tuition.shape)","pos":16,"state":"done","type":"cell"}
{"cell_type":"code","id":"11fd69","input":"# Highlighting functions for our dataframe\ndef highlight_above_avg(state):\n    # state_TF will check every row (state) and give a True/False value depending on the condition asked\n    # e.g. if the value is >.50 quantile (average value) for the column\n    state_TF = state >= state.quantile(.50)\n    return ['background: lightgreen' if state else '' for state in state_TF]\ndef highlight_top(s):   \n    state_TF = s > s.quantile(0.90)\n    return ['color: blue' if state else '' for state in state_TF]\n\ndef return_highlighted_df(state_stats):\n    return state_stats.style.apply(highlight_above_avg).apply(highlight_top)","pos":56,"state":"done","type":"cell"}
{"cell_type":"code","id":"1c422a","input":"merged_df.loc[~(merged_df['state'] == merged_df['state_name'])]['state_name'].unique()","pos":40,"state":"done","type":"cell"}
{"cell_type":"code","id":"1f5007","input":"# Define a function to add these last extras that need to be applied after our numerical calculations (highlighting for example)\n# Don't forget to pass in tuition as a parameter because you merge with it\ndef add_extras(state_stats,tuition):\n    # turn the index into a column\n    state_stats_extras = state_stats.reset_index(level=0)\n    # rename index to state\n    state_stats_extras.rename({'index': 'state'}, axis=1, inplace=True)\n    # add the state_code column\n    state_stats_extras = state_stats_extras.merge(tuition[['state','state_code']], on='state').drop_duplicates().reset_index(drop=True)\n    return state_stats_extras","pos":63,"state":"done","type":"cell"}
{"cell_type":"code","id":"28b7e9","input":"# make sure you have these files\nsalary_potential = pd.read_csv(\"./Data/salary_potential.csv\")\ntuition = pd.read_csv(\"./Data/tuition_cost.csv\")","pos":8,"state":"done","type":"cell"}
{"cell_type":"code","id":"320183","input":"merged_df['state'].equals(merged_df['state_name'])","pos":37,"state":"done","type":"cell"}
{"cell_type":"code","id":"50fecd","input":"tuition[tuition['state'].isnull()].state_code.unique()","pos":25,"state":"done","type":"cell"}
{"cell_type":"code","id":"5518e9","input":"tuition[tuition['state'].isnull()] # null is the value for an empty variable","pos":24,"state":"done","type":"cell"}
{"cell_type":"code","id":"572737","input":"","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","id":"57ccee","input":"# turn the index into a column\nstate_stats_extras = state_stats.reset_index(level=0)\n# rename index to state\nstate_stats_extras.rename({'index': 'state'}, axis=1, inplace=True)\n# finds each state and adds the code\nstate_stats_extras = state_stats_extras.merge(tuition[['state','state_code']], on='state').drop_duplicates().reset_index(drop=True)\nstate_stats_extras.head()","pos":62,"state":"done","type":"cell"}
{"cell_type":"code","id":"59d11d","input":"fig = px.scatter(state_stats_extras, x='average stem_percent', y='average early_career_pay',color='state',\n                 trendline=\"ols\", trendline_scope = 'overall',\n                 title= 'Average In State Tuition vs Average % of Students Graduating with STEM Degrees')\n\nfig.show()","pos":65,"state":"done","type":"cell"}
{"cell_type":"code","id":"5c5f82","input":"fig = px.choropleth(state_stats_extras, locations='state_code', locationmode=\"USA-states\", color=\"four year average in state tuition\", scope=\"usa\")\nfig.show()","pos":66,"state":"done","type":"cell"}
{"cell_type":"code","id":"637920","input":"salary_potential.info()","pos":20,"state":"done","type":"cell"}
{"cell_type":"code","id":"79f490","input":"# check here to find how to rename - https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html\n# we create a new dataframe called merged_df that is the combined one\nmerged_df = pd.merge(tuition, salary_potential, on='name')","pos":34,"state":"done","type":"cell"}
{"cell_type":"code","id":"808659","input":"merged_df.loc[~(merged_df['state'] == merged_df['state_name'])]['state'].unique()","pos":39,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","id":"80dbfb","input":"fig = px.choropleth(state_stats_extras, locations='state_code', locationmode=\"USA-states\", color=\"average early_career_pay\", scope=\"usa\")\nfig.show()","pos":67,"state":"done","type":"cell"}
{"cell_type":"code","id":"81a3fa","input":"state_stats = add_details(state_stats)\nstate_stats.head()","pos":52,"state":"done","type":"cell"}
{"cell_type":"code","id":"87319b","input":"return_highlighted_df(state_stats)","pos":59,"state":"done","type":"cell"}
{"cell_type":"code","id":"898624","input":"# confirm there are no null values in either dataframe, rows or columns (.sum().sum() condences it into 1 value)\nprint(tuition.isnull().sum().sum(), salary_potential.isnull().sum().sum())","pos":32,"state":"done","type":"cell"}
{"cell_type":"code","id":"a36cbc","input":"# drop room and board (axis = 1 --> column)\ntuition = tuition.drop('room_and_board', axis=1)\n# drop rows with empty make world better place (axis = 0 --> row)\nsalary_potential = salary_potential.dropna(subset=['make_world_better_percent'])","pos":31,"state":"done","type":"cell"}
{"cell_type":"code","id":"aadd15","input":"# inplace = True means that we want the rename to occur in existing dataframe, not return a new one\nmerged_df.drop(['state','state_code'], axis=1, inplace=True)\nmerged_df.head()","pos":44,"state":"done","type":"cell"}
{"cell_type":"code","id":"b1cb3c","input":"tuition.tail()","pos":13,"state":"done","type":"cell"}
{"cell_type":"code","id":"b24b83","input":"merged_df.shape","pos":45,"state":"done","type":"cell"}
{"cell_type":"code","id":"cb4293","input":"to_replace = ['New-York', 'North-Carolina', 'South-Dakota', 'South-Carolina',\n       'New-Jersey', 'West-Virginia', 'Rhode-Island', 'New-Hampshire',\n       'North-Dakota', 'New-Mexico']\nreplace_with = ['New York', 'North Carolina', 'South Dakota', 'South Carolina',\n       'New Jersey', 'West Virginia', 'Rhode Island', 'New Hampshire',\n       'North Dakota', 'New Mexico']\nfor i in range(len(to_replace)):\n    merged_df[\"state_name\"].replace({to_replace[i]: replace_with[i]}, inplace=True)\nmerged_df.loc[~(merged_df['state'] == merged_df['state_name'])]","pos":42,"state":"done","type":"cell"}
{"cell_type":"code","id":"d66187","input":"# this function cleans and merges our two dataframes, returns one merged_df\ndef clean_and_merge_dfs(tuition, salary_potential):\n    # drop room and board (axis = 1 --> column)\n    tuition = tuition.drop('room_and_board', axis=1)\n    # drop rows with empty make world better place (axis = 0 --> row)\n    salary_potential = salary_potential.dropna(subset=['make_world_better_percent'])\n    # we create a new dataframe called merged_df that is the combined one\n    merged_df = pd.merge(tuition, salary_potential, on='name')\n    # replace mismatched rows\n    to_replace = ['New-York', 'North-Carolina', 'South-Dakota', 'South-Carolina',\n       'New-Jersey', 'West-Virginia', 'Rhode-Island', 'New-Hampshire',\n       'North-Dakota', 'New-Mexico']\n    replace_with = ['New York', 'North Carolina', 'South Dakota', 'South Carolina',\n           'New Jersey', 'West Virginia', 'Rhode Island', 'New Hampshire',\n           'North Dakota', 'New Mexico']\n    for i in range(len(to_replace)):\n        merged_df[\"state_name\"].replace({to_replace[i]: replace_with[i]}, inplace=True)\n    # drop the duplicative (and slightly incorrect) column 'state'\n    merged_df.drop(['state','state_code'], axis=1, inplace=True)\n    # return the merged dataframe\n    return merged_df","pos":47,"state":"done","type":"cell"}
{"cell_type":"code","id":"d79362","input":"salary_potential.head()","pos":12,"state":"done","type":"cell"}
{"cell_type":"code","id":"e3b4e1","input":"print(salary_potential.columns)\nprint(\"\")\nprint(salary_potential.shape)","pos":15,"state":"done","type":"cell"}
{"cell_type":"code","id":"f19922","input":"","pos":5,"state":"done","type":"cell"}
{"cell_type":"code","id":"fd1194","input":"def add_details(state_stats):\n    # convert all columns to numeric\n    state_stats = state_stats.apply(pd.to_numeric)\n    # make columns for four year average out of state and in state total\n    state_stats['four year average out of state tuition'] = state_stats['average out_of_state_tuition'] * 4\n    state_stats['four year average in state tuition'] = state_stats['average in_state_tuition'] * 4\n    # make column calculating how many years on average to repay four year average in and our of state based on average early career pay in index 0\n    state_stats['years to repay in state 4 year uni based on early career pay'] =  state_stats['four year average in state tuition'] / state_stats['average early_career_pay']\n    state_stats['years to repay out of state 4 year uni based on early career pay'] = state_stats['four year average out of state tuition'] / state_stats['average early_career_pay'] \n    # make column calculating how many years on average to repay four year average in and our of state based on average mid career pay in index 0\n    state_stats['years to repay in state 4 year uni based on mid career pay'] =  state_stats['four year average in state tuition'] / state_stats['average mid_career_pay']\n    state_stats['years to repay out of state 4 year uni based on mid career pay'] = state_stats['four year average out of state tuition'] / state_stats['average mid_career_pay'] \n    # move 'years to repay out of state 4 year uni based on early career pay' to the front of the dataframe\n    state_stats = state_stats.reindex(columns=['four year average in state tuition', 'four year average out of state tuition', 'years to repay in state 4 year uni based on early career pay', 'years to repay out of state 4 year uni based on early career pay',\n    'years to repay in state 4 year uni based on mid career pay', 'years to repay out of state 4 year uni based on mid career pay',\n    'number of schools', 'average early_career_pay', 'average mid_career_pay', 'average make_world_better_percent', 'average stem_percent',\n    'average in_state_tuition','average out_of_state_tuition'])\n    return state_stats","pos":51,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0ba5ac","input":"Notice: This assumes you divert your entire paycheck to student loans and there is no interest. While this gives a guidline, that does hurt the usefullness, as different areas may allow to divert different amounts. Look out for this type of error in your own work","pos":53,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"15ebfd","input":"What does the './' ahead of our folder name do?\n<details> Pathing is more complex than you might think. The program does not know where to look for your file. \n    <br> Adding ./ tells the program to start looking from the location where this Notebook is located </details>","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"258ecc","input":"We notice that 'state' and 'room_and_board' are missing some data. State_code is not though.","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"280e40","input":"After searching Manually, Northwestern College is in Iowa & Sterling College is in Kansas. <br> This shows the importance of double checking your data. <br> I will drop the 'state column' as the 'state_name' column is the accurate one and state_code is unnecessary.","pos":43,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2a8ba4","input":"Add any more ideas you have here:","pos":68,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2d4d40","input":"##### Merging our Dataframe\nTo merge our dataframes we need to identify which columns we want to merge on. There's many ways to combine data, you can dive deeper here: <br>https://realpython.com/pandas-merge-join-and-concat/<br> We will be focusing on a simple merge. <br><br> For a simple merge, we want to have two dataframes that have a column by the same name we want to merge on. <br>In our case we want to merge using the 'name' column. We will only have the data of schools that appear identically in both dataframes.<br> One thing to keep in mind, you must merge on a column with the same name so often will need to rename a column from one dataframe.","pos":33,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"373b89","input":"Lets look at the differences, get all the unique 'state' and 'state_names' from all rows where they are not identical","pos":38,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3b07f3","input":"<details> If packages are not imported before they are used, you will receive errors. \n    <br> It is easiest to 'run all' cells which will go from top to bottom when coming back to your notebook after a break. </details>","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3c14b1","input":"One of my favorite ways to investigate a dataframe is by using highlighting. <br> Here is a quick example of how to highlight based on how the value compares to the average. <br>\nThese functions are a bit confusing because they are meant to be used by the pandas Apply function. <br> Read more here: https://www.datacamp.com/community/tutorials/pandas-apply <br> It is a way to check each row and do 'something' based on some values.","pos":54,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3c381c","input":"## Analyzing Our Data <a class=\"anchor\" id=\"Analyze\"></a>\nHere we want to start looking at our data in the context of our original goal. <br> \"Are There Associations With University Tuition & Professional Pay on a State-by-State Basis?\"<br> To do this I'm going to manually create a dataset, getting first the number of schools in that state, and then the average of statistics I am investigating.","pos":48,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"4b0dc5","input":"First up, lets find the entries with no 'state' from tuition","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"522e77","input":"## Visualizing Our Data <a class=\"anchor\" id=\"Visual\"></a>\nLast but not least we want to visualize our data, you can see different Python visualization libraries compared here:https://towardsdatascience.com/top-6-python-libraries-for-visualization-which-one-to-use-fe43381cd658 <br> We are using Plotly, as it is the most powerful and simple out of the box. <br> You can see some of the capabilities of Plotly in their documentation here: https://plotly.com/python/ <br> Note: if while running this you get an error 'PX IS NOT DEFINED' you did not import plotly.express (replace plotly with plotly.express in the import).","pos":60,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5503f8","input":"Many are issues with hyphens, some are not, let's fix the hyphen problem and look at the rest.","pos":41,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"61cf5d","input":"We don't need to stay with just the data we have been given, we can combine columns or do additional calculations on them. <br> One example is say we want to get the average 4 year cost of tuition, we can create those columns as well (and a few others)","pos":50,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6517c2","input":"Something to note aboout the below table, some green / blue values could be 'good' while others could be 'bad'. <br>\nE.g. Having a top 10% in 'average_early_career_pay' could be good, but having a top 10% 'years to repay out of state 4 year uni based on early career pay' would be less awesome.","pos":58,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"811013","input":"## Table Of Contents:\n* [Import Packages and Define Functions](#Import)\n* [Loading Data](#Load)\n* [Exploring Data](#Explore)\n* [Cleaning Data](#Clean)\n* [Analyzing Data](#Analyze)\n* [Visualizing Data](#Visual)","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"82a5b6","input":"Now we check and see there are no more null values!","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"839f82","input":"This uses python's \"list comprehension\", which you can find more on here - https://www.w3schools.com/python/python_lists_comprehension.asp","pos":55,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8d18ab","input":"Sometimes column names have extra spaces or we can't see all of them at first, lets print them and get the shape of each to see how much data we are dealing with. <br>(#Rows, #Columns)","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8d1a27","input":"We also want information on what data TYPE each of the columns are","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"970833","input":"Add any other filters you can think of to the filters","pos":57,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a1d2e8","input":"Now that we're done cleaning and merging our data, let's turn that into a function, and add it to the top as well to keep our notebook organized.","pos":46,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a311c5","input":"### Import Packages and Define Functions <a class=\"anchor\" id=\"Import\"></a>\n##### You should have a section that imports necessary packages and defines any functions at the top of every notebook, anyone know why?","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ae5633","input":"First things first, now that we have completed our calculations we will turn the index into a named column for ease of graphing and we need to include state code if we want to graph on a map.\n","pos":61,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b43217","input":"##### This section will start almost empty, you will add to it as you import new packages and define function.\n- I always recommend starting with 'import pandas as pd' for dataframe management\n* Here is the pandas docs - https://pandas.pydata.org/docs/reference/index.html#api\n- Otherwise you can ignore these for now","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c1e06e","input":"We notice that 'make_world_better_percent' is missing some data, missing data can mess with functions down the road.","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c2de29","input":"Now we have a 'state' and 'state_name' column that look duplicative, lets check.","pos":36,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cf22cd","input":"\n# Are There Associations With University Tuition & Professional Pay on a State-by-State Basis?\n\n### Also, How to Conduct Basic Exploratory Data Analysis\nFeel free to keep this notebook open, download your own dataset, and follow along with what may be applicable to YOU. <br> Keep in mind, you will almost certainly want to find other ways to manipulate your data. <br> Python has a TON of user created documentation on sites like Stack Overflow.<br> I would recommend searching \"[WhatINeedToDoWithMyDataframe], pandas\" on Google.","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d371fe","input":"## Cleaning and Merging Our Data <a class=\"anchor\" id=\"Clean\"></a>\n- Lets get rid of redundant columns, either replace or drop missing values, and do any other cleaning we might want\n- Here we will also merge our different data sources into one cohesive one","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d96947","input":"## Exploring Our Data <a class=\"anchor\" id=\"Explore\"></a>\n- Here is where we want to inform ourselves on the nitty gritty of what information our data actually holds\n- How much, what type, is there anything missing, what columns do I need & not need, etc. ","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e12e5e","input":"We still have a lot of missing data in the column 'room_and_board' and some in the 'make_world_better_place'\n<br><br>\nSince we don't care too much about room_and_board, we'll just drop that column as a whole, but for the other, we will just drop the rows that are missing that data since it is only ~3% of our dataset.","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ece9ad","input":"## Loading Data <a class=\"anchor\" id=\"Load\"></a>\n- It is best practice keeping this section clean so you know every piece of data you are importing\n- You will run into errors if you try and reference data before you have loaded it\n- Keeping data in a 'Data' folder is best for organization too","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"edce48","input":"We can see that there are a few state_codes that don't have state names, we can manually add those.\n<br>We'll make a function for this and add it to the top.","pos":26,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f28b2d","input":"##### Using .head() [first 5 rows] and .tail() [last 5 rows] is a great way to get a first look at our data","pos":11,"state":"done","type":"cell"}
{"id":0,"time":1658342043826,"type":"user"}
{"last_load":1658265093484,"type":"file"}